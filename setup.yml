---

- hosts: all
  gather_facts: no
  tasks:
    - name: Accept SSH keys
      local_action: "shell ssh-keyscan -H {{ inventory_hostname }} >> ~/.ssh/known_hosts"


- hosts: all
  become: yes
  tasks:
    - name: Attach Ubuntu Pro
      command: sudo pro attach {{ pro_key }}
      register: pro_attach_result
      ignore_errors: yes
      become: true
      when: pro_key is defined

    - name: Check Ubuntu Pro attachment result
      debug:
        msg: "Ubuntu Pro is already attached to the machine."
      when: "'This machine is already attached' in pro_attach_result.stderr"

    - name: Update package cache
      apt:
        update_cache: yes

    - name: Upgrade all packages to the latest version
      apt:
        upgrade: dist
        autoclean: yes
        autoremove: yes

    - name: Install build-essentials
      apt:
        name: build-essential
        state: present

    - name: Install git
      apt:
        name: git
        state: present

    - name: Install tmux
      apt:
        name: tmux
        state: present

    - name: Install btop
      apt:
        name: btop
        state: present

    - name: Install neofetch
      apt:
        name: neofetch
        state: present

    - name: Python3 venv dependency
      apt:
        name: python3-venv
        state: present

- hosts: collective
  become: yes
  tasks:
    - name: Get drive information
      shell: lsblk -bno NAME,SIZE | grep -E '(^sd|^nvme)' | awk '{print $1,$2}'
      register: drive_info

    - name: Debug drive information
      debug:
        var: drive_info.stdout_lines

    - name: Calculate approximate drive sizes
      set_fact:
        drive_sizes: "{{ drive_info.stdout_lines | map('split', ' ') | map('last') | map('int') | list }}"
        drive_names: "{{ drive_info.stdout_lines | map('split', ' ') | map('first') | list }}"

    - name: Debug drive sizes and names
      debug:
        msg: "Drive sizes: {{ drive_sizes }}, Drive names: {{ drive_names }}"

    - name: Determine drive for /Volumes/Scratch (approx. 2TB)
      set_fact:
        scratch_drive: "{{ item.split()[0] }}"
      loop: "{{ drive_info.stdout_lines }}"
      when: "item.split()[1] | int >= 2000000000000 * 0.98 and item.split()[1] | int < 3000000000000"

    - name: Determine drive for /Volumes/Speed (approx. 4TB)
      set_fact:
        speed_drive: "{{ item.split()[0] }}"
      loop: "{{ drive_info.stdout_lines }}"
      when: "item.split()[1] | int >= 4000000000000 * 0.98 and item.split()[1] | int < 5000000000000"

    - name: Determine drive for /Volumes/Storage (approx. 8TB)
      set_fact:
        storage_drive: "{{ item.split()[0] }}"
      loop: "{{ drive_info.stdout_lines }}"
      when: "item.split()[1] | int >= 8000000000000 * 0.98 and item.split()[1] | int < 9000000000000"

    - name: Debug drives for mount points
      debug:
        msg:
          - "Scratch drive: {{ scratch_drive if scratch_drive is defined else 'Not found' }}"
          - "Speed drive: {{ speed_drive if speed_drive is defined else 'Not found' }}"
          - "Storage drive: {{ storage_drive if storage_drive is defined else 'Not found' }}"

    - name: Check if /Volumes/Scratch drive has a filesystem
      command: blkid /dev/{{ scratch_drive }}
      register: scratch_drive_fs_check
      ignore_errors: true
      when: scratch_drive is defined
      become: true

    - name: Format drive for /Volumes/Scratch
      filesystem:
        fstype: ext4
        dev: "/dev/{{ scratch_drive }}"
      when: scratch_drive_fs_check.rc != 0 and scratch_drive is defined
      become: true

    - name: Mount /Volumes/Scratch
      mount:
        path: "/Volumes/Scratch"
        src: "/dev/{{ scratch_drive }}"
        fstype: ext4
        state: mounted
      when: scratch_drive is defined
      become: true

    - name: Add /Volumes/Scratch to /etc/fstab
      lineinfile:
        path: /etc/fstab
        line: "/dev/{{ scratch_drive }} /Volumes/Scratch ext4 defaults 0 0"
      when: scratch_drive is defined
      become: true

    - name: Check if /Volumes/Speed drive has a filesystem
      command: blkid /dev/{{ speed_drive }}
      register: speed_drive_fs_check
      ignore_errors: true
      when: speed_drive is defined
      become: true

    - name: Format drive for /Volumes/Speed
      filesystem:
        fstype: ext4
        dev: "/dev/{{ speed_drive }}"
      when: speed_drive_fs_check.rc != 0 and speed_drive is defined
      become: true

    - name: Mount /Volumes/Speed
      mount:
        path: "/Volumes/Speed"
        src: "/dev/{{ speed_drive }}"
        fstype: ext4
        state: mounted
      when: speed_drive is defined
      become: true

    - name: Add /Volumes/Speed to /etc/fstab
      lineinfile:
        path: /etc/fstab
        line: "/dev/{{ speed_drive }} /Volumes/Speed ext4 defaults 0 0"
      when: speed_drive is defined
      become: true

    - name: Check if /Volumes/Storage drive has a filesystem
      command: blkid /dev/{{ storage_drive }}
      register: storage_drive_fs_check
      ignore_errors: true
      when: storage_drive is defined
      become: true

    - name: Format drive for /Volumes/Storage
      filesystem:
        fstype: ext4
        dev: "/dev/{{ storage_drive }}"
      when: storage_drive_fs_check.rc != 0 and storage_drive is defined
      become: true

    - name: Mount /Volumes/Storage
      mount:
        path: "/Volumes/Storage"
        src: "/dev/{{ storage_drive }}"
        fstype: ext4
        state: mounted
      when: storage_drive is defined
      become: true

    - name: Add /Volumes/Storage to /etc/fstab
      lineinfile:
        path: /etc/fstab
        line: "/dev/{{ storage_drive }} /Volumes/Storage ext4 defaults 0 0"
      when: storage_drive is defined
      become: true

    - name: Change ownership of /Volumes/*
      file:
        path: "/Volumes/"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        recurse: yes
      become: true

    - name: Rocm libraries
      apt:
        name:
          - rocm-smi
          - rocm-cmake
          - rocminfo
        state: present
      when: ansible_facts.gpus|default([]) | selectattr('vendor', 'equalto', 'AMD') | list | length > 0
